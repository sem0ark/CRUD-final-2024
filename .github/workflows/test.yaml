name: CI - Test

# on simple pull requests and pushes just run the tests
on:
  push:
    branches: [main]
    tags-ignore:
      - v[0-9]+
  pull_request:
    types: [opened, reopened]
    branches: [main]

env:
  SECRET_KEY: ${{ secrets.SECRET_KEY }}
  ALGORITHM: ${{ secrets.ALGORITHM }}
  POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
  POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
  POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
  POSTGRES_PORT: 4352
  POSTGRES_HOST: "0.0.0.0"

jobs:
  ci:
    runs-on: ubuntu-latest
    # https://docs.github.com/en/actions/using-containerized-services/creating-postgresql-service-containers
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
        ports:
          - "4352:5432"
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
      - name: Install poetry
        uses: abatilo/actions-poetry@v2
        with:
          poetry-version: "1.7.1"
      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-verion: "3.10"
          cache: "poetry"
      - uses: actions/cache@v3
        name: Define a cache for the virtual environment based on the dependencies lock file
        with:
          path: ./.venv
          key: venv-${{ hashFiles('poetry.lock') }}
      - name: Install the project dependencies
        run: poetry install --no-interaction --no-ansi
      - name: Lint files
        run: poetry run ruff format ./src ./tests && poetry run mypy ./src ./tests && poetry run ruff check ./src ./tests --fix
      - name: Run migrations
        run: poetry run alembic upgrade head
      - name: Run pytest
        run: poetry run pytest --cov=src tests/
